package rmi.demo.springtestdbunitdemo.api.controller;

import com.github.springtestdbunit.DbUnitTestExecutionListener;
import com.github.springtestdbunit.annotation.DbUnitConfiguration;
import org.dbunit.DataSourceDatabaseTester;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.IDataSet;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import rmi.demo.springtestdbunitdemo.config.BasicTestConfig;

import javax.sql.DataSource;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.LocalDate;

import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

@SpringBootTest
@AutoConfigureMockMvc
@TestExecutionListeners(
    {DependencyInjectionTestExecutionListener.class, DbUnitTestExecutionListener.class})
@DbUnitConfiguration
@Import(BasicTestConfig.class)
public class BaseControllerIntegrationTest {

  protected void checkAutogeneratedDate(String tableName, String fieldName, DataSource dataSource)
      throws Exception {

    DataSourceDatabaseTester dataSourceDatabaseTester = new DataSourceDatabaseTester(dataSource);
    IDatabaseConnection connection = dataSourceDatabaseTester.getConnection();
    IDataSet actualDataSet = connection.createDataSet();
    Object value = actualDataSet.getTable(tableName).getValue(0, fieldName);
    assertNotNull(value);

  }

  protected void checkAutogeneratedId(String tableName, String fieldName, DataSource dataSource)
      throws Exception {
    DataSourceDatabaseTester dataSourceDatabaseTester = new DataSourceDatabaseTester(dataSource);
    IDatabaseConnection connection = dataSourceDatabaseTester.getConnection();
    IDataSet actualDataSet = connection.createDataSet();
    Object value = actualDataSet.getTable(tableName).getValue(0, fieldName);
    assertNotNull(value);
    assertThat(value, is(instanceOf(BigInteger.class)));
  }

  protected void checkUpdateDate(String tableName, DataSource dataSource) throws Exception {
    DataSourceDatabaseTester dataSourceDatabaseTester = new DataSourceDatabaseTester(dataSource);
    IDatabaseConnection connection = dataSourceDatabaseTester.getConnection();
    IDataSet actualDataSet = connection.createDataSet();

    LocalDate createdDate = convertAutoGenerateDateToLocalDate(
        actualDataSet.getTable(tableName).getValue(0, "CREATE_TIMESTAMP"));
    LocalDate updateDate = convertAutoGenerateDateToLocalDate(
        actualDataSet.getTable(tableName).getValue(0, "UPDATE_TIMESTAMP"));

    assertTrue(updateDate.isAfter(createdDate));

  }

  private LocalDate convertAutoGenerateDateToLocalDate(Object timeStamp) {
    return ((Timestamp) timeStamp).toLocalDateTime().toLocalDate();
  }


}
