package rmi.demo.springtestdbunitdemo.api.controller;

import com.github.springtestdbunit.DbUnitTestExecutionListener;
import com.github.springtestdbunit.annotation.DbUnitConfiguration;
import org.dbunit.DataSourceDatabaseTester;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.IDataSet;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import rmi.demo.springtestdbunitdemo.config.BasicTestConfig;

import javax.sql.DataSource;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.LocalDateTime;

import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

@SpringBootTest
@AutoConfigureMockMvc
@TestExecutionListeners(
    {DependencyInjectionTestExecutionListener.class, DbUnitTestExecutionListener.class})
@DbUnitConfiguration
@Import(BasicTestConfig.class)
public class BaseControllerIntegrationTest {

  /*
   * For demo purpose there is one table and two date fields.
   * For production or enterprise application, you can parameterize these values (e.g. method arguments)
   */
  private static String TABLE_NAME = "demo";
  private static String CREATE_DATE_FIELD_NAME = "createTimestamp";
  private static String UPDATE_DATE_FIELD_NAME = "updateTimestamp";
  private static String ID_FIELD_NAME = "id";



  protected void checkAutogeneratedDate(DataSource dataSource)
      throws Exception {

    DataSourceDatabaseTester dataSourceDatabaseTester = new DataSourceDatabaseTester(dataSource);
    IDatabaseConnection connection = dataSourceDatabaseTester.getConnection();
    IDataSet actualDataSet = connection.createDataSet();
    Object value = actualDataSet.getTable(TABLE_NAME).getValue(0, CREATE_DATE_FIELD_NAME);
    assertNotNull(value);

  }

  protected void checkAutogeneratedId(DataSource dataSource)
      throws Exception {
    DataSourceDatabaseTester dataSourceDatabaseTester = new DataSourceDatabaseTester(dataSource);
    IDatabaseConnection connection = dataSourceDatabaseTester.getConnection();
    IDataSet actualDataSet = connection.createDataSet();
    Object value = actualDataSet.getTable(TABLE_NAME).getValue(0, ID_FIELD_NAME);
    assertNotNull(value);
    assertThat(value, is(instanceOf(BigInteger.class)));
  }

  protected void checkUpdateDate(DataSource dataSource) throws Exception {
    DataSourceDatabaseTester dataSourceDatabaseTester = new DataSourceDatabaseTester(dataSource);
    IDatabaseConnection connection = dataSourceDatabaseTester.getConnection();
    IDataSet actualDataSet = connection.createDataSet();

    LocalDateTime createdDate = convertAutoGenerateDateToLocalDate(
        actualDataSet.getTable(TABLE_NAME).getValue(0, CREATE_DATE_FIELD_NAME));
    LocalDateTime updateDate = convertAutoGenerateDateToLocalDate(
        actualDataSet.getTable(TABLE_NAME).getValue(0, UPDATE_DATE_FIELD_NAME));

    assertTrue(updateDate.isAfter(createdDate));

  }

  private LocalDateTime convertAutoGenerateDateToLocalDate(Object timeStamp) {
    return ((Timestamp) timeStamp).toLocalDateTime();
  }

}
